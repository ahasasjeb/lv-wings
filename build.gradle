plugins {
	id 'java-library'
	id 'maven-publish'
	id 'net.neoforged.moddev' version '2.0.112'
	id 'idea'
	id 'eclipse'
}

tasks.named('wrapper', Wrapper).configure {
	distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
	archivesName = "${mod_id}-${minecraft_version}-NeoForge"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
	version = project.neo_version

	parchment {
		mappingsVersion = project.parchment_mappings_version
		minecraftVersion = project.parchment_minecraft_version
	}

	accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			client()
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
			devLogin = true //正版登录
		}

		server {
			server()
			programArgument '--nogui'
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		gameTestServer {
			type = "gameTestServer"
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		data {
			clientData()
			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
			gameDirectory = project.file('run-data')
		}

		configureEach {
			gameDirectory = project.file('run')
			systemProperty 'forge.logging.markers', 'REGISTRIES'
			logLevel = org.slf4j.event.Level.DEBUG
		}
	}

	mods {
		"${mod_id}" {
			sourceSet(sourceSets.main)
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	runtimeClasspath.extendsFrom localRuntime
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.spongepowered:mixin:0.8.5'
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
	var replaceProperties = [
			minecraft_version      : minecraft_version,
			minecraft_version_range: minecraft_version_range,
			neo_version            : neo_version,
			loader_version_range   : loader_version_range,
			mod_id                 : mod_id,
			mod_name               : mod_name,
			mod_license            : mod_license,
			mod_version            : mod_version,
			mod_authors            : mod_authors,
			mod_description        : mod_description,
			mod_issue_url          : mod_issue_url,
			mod_display_url        : mod_display_url,
			mod_logo               : mod_logo
	]
	inputs.properties replaceProperties
	expand replaceProperties
	from "src/main/templates"
	into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version      : minecraft_version,
			minecraft_version_range: minecraft_version_range,
			neo_version            : neo_version,
			loader_version_range   : loader_version_range,
			mod_id                 : mod_id,
			mod_name               : mod_name,
			mod_license            : mod_license,
			mod_version            : mod_version,
			mod_authors            : mod_authors,
			mod_description        : mod_description
	]
	inputs.properties replaceProperties
	exclude('META-INF/mods.toml')
	filesMatching(['pack.mcmeta']) {
		expand replaceProperties
	}
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : mod_authors,
				'Specification-Version'   : '1',
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : archiveVersion.get(),
				'Implementation-Vendor'   : mod_authors,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/mcmodsrepo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}